---
import Layout from '../../layouts/Layout.astro';
import {  getStrapiMedia, getAllBlogPosts } from '../../lib/strapi';

// This function is required for dynamic routes in Astro
export async function getStaticPaths() {
  try {
    const allPosts = await getAllBlogPosts(100);
    
    const blogPosts = allPosts.filter(post => {
      const category = post.category;
      return !category || category.Slug !== 'podcast-post';
    });
    
    return blogPosts.map(post => ({
      params: { slug: post.Slug },
      props: { post }
    }));
  } catch (error) {
    console.error("Error generating blog paths:", error);
    return [];
  }
}

const { post } = Astro.props;

// Helper functions
function getImageUrl(post) {
  if (post?.Cover) {
    return getStrapiMedia(post.Cover);
  }
  return 'https://placehold.co/1200x600/001133/0088ff?text=No+Image';
}

function getAuthor(post) {
  if (post?.author && post.author.Name) {
    return post.author.Name;
  }
  return 'Unknown Author';
}

function getDate(post) {
  if (post?.PublishedDate) {
    try {
      const date = new Date(post.PublishedDate);
      return date.toLocaleDateString('en-US', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      });
    } catch (e) {
      return 'Unknown date';
    }
  }
  return 'Unknown date';
}

// Function to render content blocks
function renderContentBlocks(blocks) {
  if (!blocks) return '';
  
  if (typeof blocks === 'string') {
    return blocks;
  }
  
  // If it's already parsed as an object
  let content = '';
  
  if (Array.isArray(blocks)) {
    blocks.forEach(block => {
      if (block.type === 'paragraph') {
        content += '<div class="mb-6">';
        if (block.children && Array.isArray(block.children)) {
          block.children.forEach(child => {
            if (child.type === 'text') {
              content += `<p>${child.text}</p>`;
            }
          });
        }
        content += '</div>';
      } else if (block.type === 'heading') {
        const level = block.level || 2;
        content += `<h${level} class="text-2xl font-bold mb-4 mt-8">`;
        if (block.children && Array.isArray(block.children)) {
          block.children.forEach(child => {
            if (child.type === 'text') {
              content += child.text;
            }
          });
        }
        content += `</h${level}>`;
      } else if (block.type === 'image' && block.image) {
        content += `<div class="my-8">
          <img src="${getStrapiMedia(block.image)}" alt="${block.caption || ''}" class="w-full rounded-lg">
          ${block.caption ? `<p class="text-sm text-gray-600 mt-2">${block.caption}</p>` : ''}
        </div>`;
      } else if (block.type === 'code') {
        content += `<pre class="bg-gray-100 p-4 rounded-lg overflow-x-auto my-6"><code>${block.code || ''}</code></pre>`;
      } else if (block.type === 'quote') {
        content += `<blockquote class="border-l-4 border-gray-300 pl-4 italic my-6">`;
        if (block.children && Array.isArray(block.children)) {
          block.children.forEach(child => {
            if (child.type === 'text') {
              content += `<p>${child.text}</p>`;
            }
          });
        }
        content += `</blockquote>`;
      }
    });
  } else if (typeof blocks === 'object') {
    // Try to handle the format shown in your example
    Object.keys(blocks).forEach(key => {
      const block = blocks[key];
      if (block.type === 'paragraph' && block.children) {
        block.children.forEach(child => {
          if (child.type === 'text' && child.text) {
            content += `<p class="mb-4">${child.text}</p>`;
          }
        });
      }
    });
  }
  
  return content || JSON.stringify(blocks);
}
---

<Layout title={post ? `${post.Title} | Evoila Blog` : "Blog Post | Evoila"}>
  <div class="pt-24 pb-16">
    {!post ? (
      <div class="container mx-auto px-6 py-16 text-center">
        <h1 class="text-3xl font-bold text-red-600 mb-4">Blog post not found</h1>
        <p class="mb-8">The blog post you're looking for could not be found.</p>
        <a href="/blog" class="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors">
          Back to Blog
        </a>
      </div>
    ) : (
      <div class="container mx-auto px-6">
        <div class="max-w-4xl mx-auto">
          <h1 class="text-4xl md:text-5xl font-bold mb-6 text-gray-900">{post?.Title}</h1>
          
          <div class="flex items-center text-gray-600 mb-8">
            <span class="font-medium">{getAuthor(post)}</span>
            <span class="mx-2">â€¢</span>
            <span>{getDate(post)}</span>
          </div>
          
          {post?.Cover && (
            <div class="mb-10">
              <img 
                src={getImageUrl(post)} 
                alt={post.Title} 
                class="w-full h-auto rounded-lg"
              />
            </div>
          )}
          
          <div class="prose prose-lg max-w-none">
            {post?.Summary && (
              <div class="text-xl text-gray-700 mb-8 font-medium">
                {post.Summary}
              </div>
            )}
            
            <div class="blog-content">
              {post?.Content ? (
                <Fragment set:html={renderContentBlocks(post.Content)} />
              ) : (
                <p>No content available for this post.</p>
              )}
            </div>
          </div>
          
          <div class="mt-12 pt-8 border-t border-gray-200">
            <a href="/blog" class="text-blue-600 hover:underline flex items-center">
              <svg class="w-4 h-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
              </svg>
              Back to all blog posts
            </a>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<style>
  .blog-content {
    line-height: 1.8;
  }
  
  .blog-content h2 {
    font-size: 1.75rem;
    font-weight: 700;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  
  .blog-content h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1.75rem;
    margin-bottom: 0.75rem;
  }
  
  .blog-content p {
    margin-bottom: 1.25rem;
  }
  
  .blog-content ul, .blog-content ol {
    margin-left: 1.5rem;
    margin-bottom: 1.25rem;
  }
  
  .blog-content li {
    margin-bottom: 0.5rem;
  }
</style> 